from .base import ParamManager
import numpy as np


class DetectionParam(ParamManager):

    def __init__(self):
        self.iou_threshold = .1
        self.roi_weight = .5
        # Foreground weights for two detectors, respectively;
        # These weights are applied on foreground classes when the detected box doesnot overlap with anyother boxes
        self.lonely_fg_weight1 = .0
        self.lonely_fg_weight2 = .0

    def initialize_weights(self, num_classes):
        """ initialize weights for distribution if dist_weights and num_classes not set """
        assert isinstance(num_classes, int)
        if not hasattr(self, 'dist_weights'):
            self.num_classes = num_classes
            self.dist_weights = [.5] * num_classes

    def dump(self):
        print("******************************* Ensemble Parameters: *******************************")
        print("dist_weight per class: {}".format(self.dist_weights))
        print("lonely_fg_weight1: {}".format(self.lonely_fg_weight1))
        print("lonely_fg_weight2: {}".format(self.lonely_fg_weight2))
        print("iou_threshold: {}".format(self.iou_threshold))
        print("roi_weight: {}".format(self.roi_weight))
        print("************************************************************************************")

    def encode(self):
        """ 
        Encode all parameters to a vector, usually used by some optimizers (bayesian optimizer, genetic algorithm)
        Return:
            code: A list that enumerate all parameters in a fixed order
            bounds: A list of tuples (Nones if no boundaries are required) that lists the corresponding boundaries, like: [(low1, hight), (low2, high2), ...]
        """
        code = [self.iou_threshold, self.roi_weight, self.lonely_fg_weight1, self.lonely_fg_weight2] + self.dist_weights
        bounds = [(0, .3), (0, 1), (0, 1), (0, 1)] + [(0, 1)] * self.num_classes
        return code, bounds

    def decode(self, code):
        """
        Update parameters given code that generated by self.encode()[0]
        """
        assert self.check_code(code)

        self.iou_threshold, self.roi_weight, self.lonely_fg_weight1, self.lonely_fg_weight2 = code[:4]
        self.dist_weights = code[4:]
